use assignment;
create table PRODUCTS(PRODUCT_CODE VARCHAR(20),PRODUCT_NAME
VARCHAR(100),PRICE INT,QUANTITY_REMAINING INT,
QUANTITY_SOLD INT);
INSERT INTO PRODUCTS VALUES
('P1','IPHONE 13 PRO MAX',1200,5,195),
('P2','AIRODS PRO',279,10,90),
('P3','MACBOOK PRO 16',5000,2,48),
('P4','IPAD AIR',650,1,9);
DROP TABLE SALES;
CREATE TABLE SALES(ORDER_ID INT,ORDER_DATE DATE,PRODUCT_CODE
VARCHAR(20) REFERENCES PRODUCTS(PRODUCT_CODE),QUANTITY_ORDERED INT,SALE_PRICE INT);
INSERT INTO SALES VALUES
(1,'2022-01-10','P1',100,120000),
(2,'2022-01-20','P1',50,60000),
(3,'2022-02-05','P1',45,540000),
(4,'2022-01-15','P2',50,13950),
(5,'2022-03-25','P2',40,11160),
(6,'2022-02-25','P3',10,50000),
(7,'2022-03-15','P3',10,50000),
(8,'2022-03-25','P3',20,100000),
(9,'2022-04-21','P3',8,40000),
(10,'2022-04-27','P4',9,5850);
select PRODUCTS.PRODUCT_CODE,PRODUCTS.QUANTITY_REMAINING
 from PRODUCTS INNER JOIN SALES ON 
 PRODUCTS.PRODUCT_CODE=SALES.PRODUCT_CODE WHERE
 SALES.QUANTITY_ORDERED<=PRODUCTS.QUANTITY_REMAINING;
 SELECT SUM(PRICE),SUM(QUANTITY_REMAINING) FROM PRODUCTS
 WHERE PRODUCT_NAME="IPHONE 13 PRO MAX";
